[build-system]
requires = ['setuptools']
build-backend = 'setuptools.build_meta'

[project]
name = 'todd_ai'
version = '0.5.1'
description = 'Toolkit for Object Detection Distillation'
readme = 'README.md'
requires-python = '>=3.11'
classifiers = [
    'Programming Language :: Python :: 3',
    'License :: OSI Approved :: Apache Software License',
    'Operating System :: OS Independent',
]
dependencies = [
    'einops',
    'ffmpeg-python',
    'lmdb',
    'opencv-python',
    'pandas',
    'python-pptx',
    'tensorboard',
    'timm',
    'toml',
    'typing_extensions',
    'yapf',
]

[project.license]
file = 'LICENSE'

[[project.authors]]
name = 'Luting Wang'
email = 'wangluting@buaa.edu.cn'

[project.urls]
Homepage = 'https://github.com/LutingWang/todd'
Documentation = 'https://toddai.readthedocs.io/en/latest/'

[project.optional-dependencies]
dev = [
    'autoflake',
    'bandit[toml]',
    'codespell',
    'commitizen',
    'doc8',
    'docformatter[tomli]',
    'flake8',
    'flake8-bugbear',
    'flake8-docstrings',
    'ipdb',
    'ipykernel',
    'jupyter',
    'matplotlib',
    'mccabe',
    'mypy',
    'pandas-stubs',
    'pep8-naming',
    'pre-commit',
    'pydocstyle',
    'pylint',
    'torch-tb-profiler',
    'tqdm',
    'types-Pillow',
    'types-toml',
    'types-tqdm',
]
doc = [
    'mmcv<2.0',
    'python-docs-theme',
    'sphinx',
    'sphinx_rtd_theme',
]
test = [
    'coverage',
    'mmcv<2.0',
    'pytest',
]

[project.scripts]
configs_diff = 'todd.configs.diff:diff_cli'
collect_env = 'todd.utils.collect_env:collect_env_cli'
sgr = 'todd.loggers.control_sequences.sgr:sgr_cli'
images_to_video = 'todd.patches.cv2.video:images_to_video_cli'

[tool.setuptools.packages.find]
include = [
    'todd*',
]

[tool.setuptools.package-data]
todd = [
    'py.typed',
]

[tool.autoflake]
in-place = true

[tool.yapf]
allow_split_before_dict_value = false
coalesce_brackets = true
dedent_closing_brackets = true
split_arguments_when_comma_terminated = true
split_complex_comprehension = true
split_before_arithmetic_operator = true

[tool.isort]
extra_standard_library = [
    'typing_extensions',
]
profile = 'hug'
src_paths = [
    'tests',
    'todd',
]
line_length = 79
multi_line_output = 3

[tool.pydocstyle]
convention = 'google'
add-ignore = 'D100,D101,D102,D103,D104,D105,D106,D107'

[tool.mypy]
files = [
    'tests',
    'todd',
]
plugins = 'numpy.typing.mypy_plugin'

[[tool.mypy.overrides]]
module = [
    'custom_types.*',
    'cv2.*',
    'lmdb.*',
    'lvis.*',
    'ipdb.*',
    'mmcv.*',
    'pptx.*',
    'setuptools.*',
    'torchvision.*',
    'yapf.*',
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    'todd.base._patches.*',
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    'todd.base._patches.*',
]
ignore_errors = true

[tool.codespell]
write-changes = true

[[tool.mypy.overrides]]
module = [
    'todd.base._patches.*',
]
ignore_errors = true

[tool.pytest.ini_options]
norecursedirs = [
    'tests/helpers',
    'tests/test_configs/py',
]
filterwarnings = [
    'ignore::DeprecationWarning:pkg_resources:121',
    'ignore::DeprecationWarning:pkg_resources:2870',
    'ignore::DeprecationWarning:yapf:16',
    'ignore::UserWarning:mmcv:20',
    'ignore::DeprecationWarning:torch:4',
    'ignore::DeprecationWarning:torch:6',
]
testpaths = 'tests todd'
addopts = '--doctest-modules'

[tool.coverage.run]
branch = true
command_line = '-m pytest'
source = [
    'todd',
]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',

    'def __repr__',
    'def \w+_cli\(\)',

    'raise AssertionError',
    'raise NotImplementedError',

    'if __name__ == .__main__.:',

    'class .*\(.*\bProtocol\b.*\):',
    '@(abc\.)?abstractmethod',
    '@overload',
]

[tool.commitizen]
name = 'cz_conventional_commits'
version = "0.5.1"
tag_format = 'v$version'
version_files = [
    'pyproject.toml:^version',
    'docs/source/conf.py:^release',
    'CITATION.cff:^version',
    'todd/__init__.py:^__version__',
]

[tool.pylint.main]
init-hook = '''
import os
import sys
from pylint.config import find_default_config_files
default_config_file = next(find_default_config_files())
path = os.path.join(os.path.dirname(default_config_file), 'tests/helpers')
sys.path.append(path)
'''

[tool.pylint.'messages control']
disable = [
    'attribute-defined-outside-init',
    'cyclic-import',
    'design',
    'eval-used',
    'exec-used',
    'fixme',
    'import-outside-toplevel',
    'missing-module-docstring',
    'missing-class-docstring',
    'missing-function-docstring',
    'not-callable',
    'protected-access',
    'unspecified-encoding',
    'unused-argument',
    'use-dict-literal',
    'use-list-literal',
]
enable = [
    'useless-suppression',
]

[tool.pylint.typecheck]
signature-mutators = [
    'all_gather_decorator',
]
generated-members = [
    'cv2.*',
    'torch.*',
]

[tool.pylint.format]
expected-line-ending-format = 'LF'
max-line-length = 79

[tool.bandit]
skips = [
    'B101',
]
